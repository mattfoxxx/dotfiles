This is my emacs config file in org mode

* Evil mode
#+BEGIN_SRC emacs-lisp
(require 'evil)
  (evil-mode 1)
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
   :ensure t
   :init (add-hook 'org-mode-hook 'org-bullets-mode))
(use-package org
  :ensure t        ; But it comes with Emacs now!?
  :init
  (setq org-use-speed-commands t
        org-return-follows-link t
        org-hide-emphasis-markers t
        org-completion-use-ido t
        org-outline-path-complete-in-steps nil
        org-src-fontify-natively t   ;; Pretty code blocks
        org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil
        org-todo-keywords '((sequence "TODO(t)" "DOING(g)" "|" "DONE(d)")
                            (sequence "|" "CANCELED(c)")))
  (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
  (add-to-list 'auto-mode-alist '(".*/[0-9]*$" . org-mode))   ;; Journal entries
  (add-hook 'org-mode-hook 'yas-minor-mode-on)
  :bind (("C-c l" . org-store-link)
         ("C-c c" . org-capture)
         ("C-M-|" . indent-rigidly))
  :config
  (font-lock-add-keywords            ; A bit silly but my headers are now
   'org-mode `(("^\\*+ \\(TODO\\) "  ; shorter, and that is nice canceled
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚑")
                          nil)))
               ("^\\*+ \\(DOING\\) "
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚐")
                          nil)))
               ("^\\*+ \\(CANCELED\\) "
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘")
                          nil)))
               ("^\\*+ \\(DONE\\) "
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "✔")
                          nil)))))

  (define-key org-mode-map (kbd "M-C-n") 'org-end-of-item-list)
  (define-key org-mode-map (kbd "M-C-p") 'org-beginning-of-item-list)
  (define-key org-mode-map (kbd "M-C-u") 'outline-up-heading)
  (define-key org-mode-map (kbd "M-C-w") 'org-table-copy-region)
  (define-key org-mode-map (kbd "M-C-y") 'org-table-paste-rectangle)

  (define-key org-mode-map [remap org-return] (lambda () (interactive)
                                                (if (org-in-src-block-p)
                                                    (org-return)
                                                  (org-return-indent)))))
#+END_SRC
* Powerline
#+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-default-theme)
#+END_SRC

* Notmuch
#+BEGIN_SRC emacs-lisp
(require 'notmuch)
(define-key notmuch-show-mode-map "U" 'browse-url-at-point) 
#+END_SRC

* Markdown-mode
#+BEGIN_SRC emacs-lisp
(autoload 'markdown-mode "markdown-mode.el"
   "Major mode for editing Markdown files" t)
(setq auto-mode-alist
   (cons '("\.md" . markdown-mode) auto-mode-alist))

#+END_SRC

* Custom variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(elpy-rpc-python-command "python3")
 '(notmuch-saved-searches
   (quote
    ((:name "inbox" :query "tag:Inbox" :key "i" :sort-order newest-first)
     (:name "unread" :query "tag:unread" :key "u" :sort-order newest-first)
     (:name "flagged" :query "tag:flagged" :key "f")
     (:name "sent" :query "tag:sent" :key "t")
     (:name "drafts" :query "tag:draft" :key "d")
     (:name "all mail" :query "*" :key "a" :sort-order newest-first))))
 '(package-selected-packages
   (quote
    (powerline-evil docker-compose-mode docker-tramp dockerfile-mode helm-swoop rjsx-mode elpy evil)))
 '(python-shell-interpreter "python3"))
#+END_SRC

* Faces
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

#+END_SRC

* Elpy
#+BEGIN_SRC emacs-lisp
(elpy-enable)
#+END_SRC

* Company-mode
#+BEGIN_SRC emacs-lisp
;;(require 'company)
;;;; keybindings
;;(define-key company-active-map (kbd "C-n") 'company-selet-next)
;;(define-key company-active-map (kbd "C-p") 'company-selet-previous)
#+END_SRC

* Global key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-i") 'helm-swoop)
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(global-set-key (kbd "C-x r b") 'helm-bookmarks)
(global-set-key (kbd "C-x m") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
#+END_SRC

* Dockerfile
#+BEGIN_SRC emacs-lisp
(require 'docker-compose-mode)
;;(add-to-list 'load-path "/your/path/to/dockerfile-mode/")
(require 'dockerfile-mode)
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+END_SRC

* Mail
** Mail - signature switching
#+BEGIN_SRC emacs-lisp 
 ;; Define two identities, "home" and "work"
     (setq gnus-alias-identity-alist
           '(("home"
              nil ;; Does not refer to any other identity
              "Matthias Mintert <matthias@mintert.net>" ;; Sender address
              nil ;; No organization header
              nil ;; No extra headers - ex. (("Bcc" . "john.doe@example.com"))
              nil ;; No extra body text
              "~/.signature.home")
             ("work"
              nil
              "Matthias Mintert <mintert@billiger-mietwagen.de>"
              "SilverTours GmbH"
              nil
              nil
              "~/.signature")))
     ;; Use "home" identity by default
     (setq gnus-alias-default-identity "work")
     ;; Define rules to match work identity
     (setq gnus-alias-identity-rules
           '(("work" ("any" "mintert@\\(billiger-mietwagen\\.de\\)" both) "work")))
     ;; Determine identity when message-mode loads
     (add-hook 'message-setup-hook 'gnus-alias-determine-identity)
#+END_SRC
** Mail - set html renderer 
#+BEGIN_SRC emacs-lisp 
 ;; html renderer for mail
 (setq mm-text-html-rendrer "links")

#+END_SRC
** Mail - set from address from mail header
#+BEGIN_SRC emacs-lisp 
 (setq mail-specify-envelope-from "t")
 (setq message-sendmail-envelope-from "header")
 (setq mail-envelope-from "header")
#+END_SRC
** Mail - gpg
#+BEGIN_SRC emacs-lisp
;; Sign messages by default.
    (add-hook 'message-setup-hook 'mml-secure-sign-pgpmime)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
;; projectile
;;(require 'projectile)
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands projectile-ag
  :init (projectile-global-mode 1)
  :config
  (setq projectile-completion-system 'ido
  projectile-project-search-path '("~/git/" "~/Dokumente/")))

  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

;;(use-package counsel-projectile
;;  :ensure t
;;  :config
;;  (counsel-projectile-on))
#+END_SRC
* Which-key
  Add which-key.el to your =load-path= and require. Something like
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'load-path "path/to/which-key.el")
(require 'which-key)
(which-key-mode)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :commands magit-status magit-blame
  :init
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))
  :config
  (setq magit-branch-arguments nil
        ;; use ido to look for branches
        magit-completing-read-function 'magit-ido-completing-read
        ;; don't put "origin-" in front of new branch names by default
        magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
        magit-push-always-verify nil
        ;; Get rid of the previous advice to go into fullscreen
        magit-restore-window-configuration t)

  :bind ("C-x g" . magit-status))

#+END_SRC
